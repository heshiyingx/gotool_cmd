// Code generated by gotool. DO NOT EDIT.
// If you find any bugs, please contact heshiyingx@126.com.
// Your help is greatly appreciated.

package code

import (
	"context"

	"fmt"
	"strings"
	"time"

	// "github.com/heshiyingx/gotool/dbext/gormdb/v2"
	"gorm.io/gorm"
)

var (
	cacheNutritionStoreIdPrefix     = "cache:nutritionStore:id:"
	cacheNutritionStoreUserIdPrefix = "cache:nutritionStore:userId:"
)

type (
	nutritionStoreModel interface {
		NutritionStoreInsert(ctx context.Context, data *NutritionStore, delCacheKeys ...string) (int64, error)
		NutritionStoreFindById(ctx context.Context, id int64) (*NutritionStore, error)
		NutritionStoreUpdateById(ctx context.Context, id int64, updateObj *NutritionStore, delCacheKeys []string, fields ...string) (int64, error)
		NutritionStoreDeleteById(ctx context.Context, id int64, delCacheKeys ...string) (int64, error)
	}

	NutritionStore struct {
		Id        int64      `db:"id" gorm:"column:id" json:"id,omitempty"`
		UserId    int64      `db:"user_id" gorm:"column:user_id" json:"user_id,omitempty"`          // 用户ID
		Num       int64      `db:"num" gorm:"column:num" json:"num,omitempty"`                      // 数量
		CreatedAt *time.Time `db:"created_at" gorm:"column:created_at" json:"created_at,omitempty"` // 创建时间
		UpdatedAt *time.Time `db:"updated_at" gorm:"column:updated_at" json:"updated_at,omitempty"` // 更新时间
	}
)

func (m *defaultModel) NutritionStoreInsert(ctx context.Context, data *NutritionStore, delCacheKeys ...string) (int64, error) {
	nutritionStoreUserIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreUserIdPrefix, data.UserId)
	afterDel := true

	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))
	delCacheAllKeys = append(delCacheAllKeys, nutritionStoreUserIdKey)

	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	if data.Id != 0 {
		afterDel = false
		nutritionStoreIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreIdPrefix, data.Id)
		delCacheAllKeys = append(delCacheAllKeys, nutritionStoreIdKey)
	}

	result, err := m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		res := db.WithContext(ctx).Model(&NutritionStore{}).Create(data)
		return res.RowsAffected, res.Error
	}, delCacheAllKeys...)

	if err != nil {
		return 0, err
	}

	if afterDel {
		nutritionStoreIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreIdPrefix, data.Id)
		err = m.db.DelCacheKeysAndDelay(ctx, nutritionStoreIdKey)
		if err != nil {
			return 0, err
		}
	}
	return result, err

}

func (m *defaultModel) NutritionStoreFindById(ctx context.Context, id int64) (*NutritionStore, error) {
	nutritionStoreIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreIdPrefix, id)
	var resp NutritionStore
	err := m.db.QueryByCtx(ctx, &resp, nutritionStoreIdKey, func(ctx context.Context, r any, db *gorm.DB) error {
		return db.WithContext(ctx).Model(&NutritionStore{}).Where("`id`=?", id).Take(r).Error
	})
	return &resp, err

}

func (m *defaultModel) NutritionStoreUpdateById(ctx context.Context, id int64, updateObj *NutritionStore, delCacheKeys []string, fields ...string) (int64, error) {
	if updateObj == nil {
		return 0, nil
	}

	data, err := m.NutritionStoreFindById(ctx, id)
	if err != nil {
		return 0, err
	}
	nutritionStoreIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreIdPrefix, data.Id)
	nutritionStoreUserIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreUserIdPrefix, data.UserId)

	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))

	delCacheAllKeys = append(delCacheAllKeys, nutritionStoreIdKey)

	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		upTx := db.WithContext(ctx).Model(&NutritionStore{}).Where("`id`=?", id)
		if len(fields) > 0 {
			upTx = upTx.Select(strings.Join(fields, ",")).Updates(updateObj)
		} else {
			upTx = upTx.Save(updateObj)
		}
		return upTx.RowsAffected, upTx.Error
	}, delCacheAllKeys...)

}

func (m *defaultModel) NutritionStoreDeleteById(ctx context.Context, id int64, delCacheKeys ...string) (int64, error) {

	data, err := m.NutritionStoreFindById(ctx, id)
	if err != nil {
		return 0, err
	}

	nutritionStoreIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreIdPrefix, id)
	nutritionStoreUserIdKey := fmt.Sprintf("%s%v", cacheNutritionStoreUserIdPrefix, data.UserId)

	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))

	delCacheAllKeys = append(delCacheAllKeys, nutritionStoreIdKey, nutritionStoreUserIdKey)

	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		res := db.Where("id = ?", id).Delete(&NutritionStore{})
		return res.RowsAffected, res.Error
	}, delCacheAllKeys...)

}

func (NutritionStore) TableName() string {
	return "nutrition_store"
}
