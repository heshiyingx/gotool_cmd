// Code generated by gotool. DO NOT EDIT.
// If you find any bugs, please contact heshiyingx@126.com.
// Your help is greatly appreciated.

package code

import (
	"context"

	"fmt"
	"strings"
	"time"

	// "github.com/heshiyingx/gotool/dbext/gormdb/v2"
	"gorm.io/gorm"
)

var (
	cacheFeedStoreHistoryIdPrefix         = "cache:feedStoreHistory:id:"
	cacheFeedStoreHistoryUserIdOpIdPrefix = "cache:feedStoreHistory:userId:opId:"
)

type (
	feedStoreHistoryModel interface {
		FeedStoreHistoryInsert(ctx context.Context, data *FeedStoreHistory, delCacheKeys ...string) (int64, error)
		FeedStoreHistoryFindById(ctx context.Context, id int64) (*FeedStoreHistory, error)
		FeedStoreHistoryUpdateById(ctx context.Context, id int64, updateObj *FeedStoreHistory, delCacheKeys []string, fields ...string) (int64, error)
		FeedStoreHistoryDeleteById(ctx context.Context, id int64, delCacheKeys ...string) (int64, error)
		FeedStoreHistoryFindOneByUserIdOpId(ctx context.Context, userId int64, opId string) (*FeedStoreHistory, error)
		FeedStoreHistoryDeleteOneByUserIdOpId(ctx context.Context, userId int64, opId string, delCacheKeys ...string) (int64, error)
		FeedStoreHistoryUpdateOneByUserIdOpId(ctx context.Context, userId int64, opId string, updateObj *FeedStoreHistory, delCacheKeys []string, fields ...string) (int64, error)
	}

	FeedStoreHistory struct {
		Id        int64      `db:"id" gorm:"column:id" json:"id,omitempty"`                         // 主键
		UserId    int64      `db:"user_id" gorm:"column:user_id" json:"user_id,omitempty"`          // 用户ID
		ChickenId int64      `db:"chicken_id" gorm:"column:chicken_id" json:"chicken_id,omitempty"` // 小鸡ID
		OpType    int64      `db:"op_type" gorm:"column:op_type" json:"op_type,omitempty"`          // 操作类型,1:增加，2：减少
		Value     int64      `db:"value" gorm:"column:value" json:"value,omitempty"`                // 改变的值
		OpId      string     `db:"op_id" gorm:"column:op_id" json:"op_id,omitempty"`                // 操作id，用于去重
		Comment   string     `db:"comment" gorm:"column:comment" json:"comment,omitempty"`          // 备注说明
		CreatedAt *time.Time `db:"created_at" gorm:"column:created_at" json:"created_at,omitempty"` // 创建时间
		UpdatedAt *time.Time `db:"updated_at" gorm:"column:updated_at" json:"updated_at,omitempty"` // 更新时间
	}
)

func (m *defaultModel) FeedStoreHistoryInsert(ctx context.Context, data *FeedStoreHistory, delCacheKeys ...string) (int64, error) {
	feedStoreHistoryUserIdOpIdKey := fmt.Sprintf("%s%v:%v", cacheFeedStoreHistoryUserIdOpIdPrefix, data.UserId, data.OpId)
	afterDel := true

	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))
	delCacheAllKeys = append(delCacheAllKeys, feedStoreHistoryUserIdOpIdKey)

	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	if data.Id != 0 {
		afterDel = false
		feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, data.Id)
		delCacheAllKeys = append(delCacheAllKeys, feedStoreHistoryIdKey)
	}

	result, err := m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		res := db.WithContext(ctx).Model(&FeedStoreHistory{}).Create(data)
		return res.RowsAffected, res.Error
	}, delCacheAllKeys...)

	if err != nil {
		return 0, err
	}

	if afterDel {
		feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, data.Id)
		err = m.db.DelCacheKeysAndDelay(ctx, feedStoreHistoryIdKey)
		if err != nil {
			return 0, err
		}
	}
	return result, err

}

func (m *defaultModel) FeedStoreHistoryFindById(ctx context.Context, id int64) (*FeedStoreHistory, error) {
	feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, id)
	var resp FeedStoreHistory
	err := m.db.QueryByCtx(ctx, &resp, feedStoreHistoryIdKey, func(ctx context.Context, r any, db *gorm.DB) error {
		return db.WithContext(ctx).Model(&FeedStoreHistory{}).Where("`id`=?", id).Take(r).Error
	})
	return &resp, err
}

func (m *defaultModel) FeedStoreHistoryUpdateById(ctx context.Context, id int64, updateObj *FeedStoreHistory, delCacheKeys []string, fields ...string) (int64, error) {
	if updateObj == nil {
		return 0, nil
	}

	data, err := m.FeedStoreHistoryFindById(ctx, id)
	if err != nil {
		return 0, err
	}
	feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, data.Id)
	feedStoreHistoryUserIdOpIdKey := fmt.Sprintf("%s%v:%v", cacheFeedStoreHistoryUserIdOpIdPrefix, data.UserId, data.OpId)

	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))
	delCacheAllKeys = append(delCacheAllKeys, feedStoreHistoryIdKey, feedStoreHistoryUserIdOpIdKey)
	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		upTx := db.WithContext(ctx).Model(&FeedStoreHistory{}).Where("`id`=?", id)
		if len(fields) > 0 {
			upTx = upTx.Select(strings.Join(fields, ",")).Updates(updateObj)
		} else {
			upTx = upTx.Save(updateObj)
		}
		return upTx.RowsAffected, upTx.Error
	}, delCacheAllKeys...)

}

func (m *defaultModel) FeedStoreHistoryDeleteById(ctx context.Context, id int64, delCacheKeys ...string) (int64, error) {

	data, err := m.FeedStoreHistoryFindById(ctx, id)
	if err != nil {
		return 0, err
	}

	feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, id)
	feedStoreHistoryUserIdOpIdKey := fmt.Sprintf("%s%v:%v", cacheFeedStoreHistoryUserIdOpIdPrefix, data.UserId, data.OpId)

	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))

	delCacheAllKeys = append(delCacheAllKeys, feedStoreHistoryIdKey, feedStoreHistoryUserIdOpIdKey)
	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		res := db.Where("`id` = ?", id).Delete(&FeedStoreHistory{})
		return res.RowsAffected, res.Error
	}, delCacheAllKeys...)

}

func (m *defaultModel) FeedStoreHistoryFindOneByUserIdOpId(ctx context.Context, userId int64, opId string) (*FeedStoreHistory, error) {
	feedStoreHistoryUserIdOpIdKey := fmt.Sprintf("%s%v:%v", cacheFeedStoreHistoryUserIdOpIdPrefix, userId, opId)

	var Id int64
	err := m.db.QueryByCtx(ctx, &Id, feedStoreHistoryUserIdOpIdKey, func(ctx context.Context, p any, db *gorm.DB) error {
		return db.Model(&FeedStoreHistory{}).Select("`id`").Where("`user_id` = ? and `op_id` = ?", userId, opId).Take(p).Error
	})
	if err != nil {
		return nil, err
	}

	feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, Id)
	var resp FeedStoreHistory
	err = m.db.QueryByCtx(ctx, &resp, feedStoreHistoryIdKey, func(ctx context.Context, r any, db *gorm.DB) error {
		return db.Model(&FeedStoreHistory{}).Where("`id`= ?", Id).Take(r).Error
	})
	return &resp, err

}

func (m *defaultModel) FeedStoreHistoryUpdateOneByUserIdOpId(ctx context.Context, userId int64, opId string, updateObj *FeedStoreHistory, delCacheKeys []string, fields ...string) (int64, error) {
	if updateObj == nil {
		return 0, nil
	}
	data, err := m.FeedStoreHistoryFindOneByUserIdOpId(ctx, userId, opId)
	if err != nil {
		return 0, err
	}
	feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, data.Id)
	feedStoreHistoryUserIdOpIdKey := fmt.Sprintf("%s%v:%v", cacheFeedStoreHistoryUserIdOpIdPrefix, data.UserId, data.OpId)
	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))
	delCacheAllKeys = append(delCacheAllKeys, feedStoreHistoryIdKey, feedStoreHistoryUserIdOpIdKey)
	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		upTx := db.Model(&FeedStoreHistory{}).Where("`id`", data.Id)
		if len(fields) > 0 {
			upTx = upTx.Select(strings.Join(fields, ",")).Updates(updateObj)
		} else {
			upTx = upTx.Save(updateObj)
		}
		return upTx.RowsAffected, upTx.Error
	}, delCacheAllKeys...)

}

func (m *defaultModel) FeedStoreHistoryDeleteOneByUserIdOpId(ctx context.Context, userId int64, opId string, delCacheKeys ...string) (int64, error) {

	data, err := m.FeedStoreHistoryFindOneByUserIdOpId(ctx, userId, opId)
	if err != nil {
		return 0, err
	}
	feedStoreHistoryIdKey := fmt.Sprintf("%s%v", cacheFeedStoreHistoryIdPrefix, data.Id)
	feedStoreHistoryUserIdOpIdKey := fmt.Sprintf("%s%v:%v", cacheFeedStoreHistoryUserIdOpIdPrefix, data.UserId, data.OpId)

	delCacheAllKeys := make([]string, 0, 2+len(delCacheKeys))
	delCacheAllKeys = append(delCacheAllKeys, feedStoreHistoryIdKey, feedStoreHistoryUserIdOpIdKey)
	if len(delCacheKeys) > 0 {
		delCacheAllKeys = append(delCacheAllKeys, delCacheKeys...)
	}

	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		delTx := db.Where("`id`", data.Id).Delete(&FeedStoreHistory{})
		return delTx.RowsAffected, delTx.Error
	}, delCacheAllKeys...)

}

func (FeedStoreHistory) TableName() string {
	return "feed_store_history"
}
