// Code generated by gotool. DO NOT EDIT.
// If you find any bugs, please contact heshiyingx@126.com.
// Your help is greatly appreciated.

package model2

import (
	"context"

	"fmt"
	"strings"
	"time"

	"github.com/heshiyingx/gotool/dbext/gormdb"
	"gorm.io/gorm"
)

var (
	cacheAbDialConfigIdPrefix = "cache:ab:dialConfig:id:"
)

type (
	dialConfigModel interface {
		Insert(ctx context.Context, data *DialConfig) (int64, error)
		FindById(ctx context.Context, id int64) (*DialConfig, error)
		UpdateById(ctx context.Context, id int64, updateObj *DialConfig, fields ...string) (int64, error)
		DeleteById(ctx context.Context, id int64) (int64, error)
	}

	defaultDialConfigModel struct {
		db *gormdb.CacheGormDB[DialConfig, int64]
	}

	DialConfig struct {
		Id          int64          `db:"id" gorm:"column:id" json:"id,omitempty"`                               // id
		Title       string         `db:"title" gorm:"column:title" json:"title,omitempty"`                      // 标题
		Stage       int8           `db:"stage" gorm:"column:stage" json:"stage,omitempty"`                      // 1 孵化器，2 成长期，3下蛋期
		Condition   int8           `db:"condition" gorm:"column:condition" json:"condition,omitempty"`          // 条件；1.完成新手引导，2.点击小鸡，3.超时未喂食，4.喂食，5.成长进度，6.下蛋，7.stage，8.营养值，9.超时未进入首页，10.鸡蛋收集
		Content     string         `db:"content" gorm:"column:content" json:"content,omitempty"`                // 台词配置
		DeletedAt   gorm.DeletedAt `db:"deleted_at" gorm:"column:deleted_at" json:"deleted_at,omitempty"`       // 删除时间
		IsForbidden int8           `db:"is_forbidden" gorm:"column:is_forbidden" json:"is_forbidden,omitempty"` // 是否禁用，0：正常，1：禁用
		CreatedAt   *time.Time     `db:"created_at" gorm:"column:created_at" json:"created_at,omitempty"`
		UpdatedAt   *time.Time     `db:"updated_at" gorm:"column:updated_at" json:"updated_at,omitempty"` // 更新时间
	}
)

func newDefaultDialConfigModel(config gormdb.Config) *defaultDialConfigModel {

	cacheGormDB := gormdb.MustNewCacheGormDB[DialConfig, int64](config)
	return &defaultDialConfigModel{
		db: cacheGormDB,
	}

}

func (m *defaultDialConfigModel) Insert(ctx context.Context, data *DialConfig) (int64, error) {

	afterDel := true
	cacheKeys := make([]string, 0, 1)
	cacheKeys = []string{}

	if data.Id != 0 {
		afterDel = false
		abDialConfigIdKey := fmt.Sprintf("%s%v", cacheAbDialConfigIdPrefix, data.Id)
		cacheKeys = append(cacheKeys, abDialConfigIdKey)
	}

	result, err := m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		res := db.Model(&DialConfig{}).Create(data)
		return res.RowsAffected, res.Error
	}, cacheKeys...)

	if err != nil {
		return 0, err
	}

	if afterDel {
		abDialConfigIdKey := fmt.Sprintf("%s%v", cacheAbDialConfigIdPrefix, data.Id)
		err = m.db.DelCacheKeys(ctx, abDialConfigIdKey)
		if err != nil {
			return 0, err
		}
	}
	return result, err

}

func (m *defaultDialConfigModel) FindById(ctx context.Context, id int64) (*DialConfig, error) {
	abDialConfigIdKey := fmt.Sprintf("%s%v", cacheAbDialConfigIdPrefix, id)
	var resp DialConfig
	err := m.db.QueryOneByPKCtx(ctx, &resp, abDialConfigIdKey, func(ctx context.Context, r any, db *gorm.DB) error {
		return db.Model(&DialConfig{}).Where("`id`=?", id).Take(r).Error
	})
	return &resp, err

}

func (m *defaultDialConfigModel) UpdateById(ctx context.Context, id int64, updateObj *DialConfig, fields ...string) (int64, error) {
	if updateObj == nil {
		return 0, nil
	}

	data, err := m.FindById(ctx, id)
	if err != nil {
		return 0, err
	}
	abDialConfigIdKey := fmt.Sprintf("%s%v", cacheAbDialConfigIdPrefix, data.Id)
	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		upTx := db.Model(&DialConfig{}).Where("`id`=?", id)
		if len(fields) > 0 {
			upTx = upTx.Select(strings.Join(fields, ",")).Updates(updateObj)
		} else {
			upTx = upTx.Save(updateObj)
		}
		return upTx.RowsAffected, upTx.Error
	}, abDialConfigIdKey)

}

func (m *defaultDialConfigModel) DeleteById(ctx context.Context, id int64) (int64, error) {

	abDialConfigIdKey := fmt.Sprintf("%s%v", cacheAbDialConfigIdPrefix, id)

	return m.db.ExecCtx(ctx, func(ctx context.Context, db *gorm.DB) (int64, error) {
		res := db.Where("id = ?", id).Delete(&DialConfig{})
		return res.RowsAffected, res.Error
	}, abDialConfigIdKey)

}

func (DialConfig) TableName() string {
	return "dial_config"
}
