# .goreleaser.yml
version: 2
project_name: gotool
builds:
  # 你能用 多个 构建 定义，yaml格式
  -
    #  main.go 文件或者主包的路径 .
    # 默认 `.`.
    main: ./cmd/main.go
    dir: .                   # 构建目录
    env:
      - CGO_ENABLED=0        # 关闭 CGO
    goos: # 目标平台
      - linux
      - darwin
      - windows
    goarch: # 目标架构
        - amd64
        - arm64

    # 命名 最终二进制文件的模版.
    # 默认是 项目目录的名称.
    binary: gotool

    # 设置 命令参数到自定义的 build tags.
    # 默认是 空.
    flags:
      - -tags=dev

    # Custom asmflags templates.
    # 默认是 空.
    asmflags:
      - -D mysymbol
      - all=-trimpath={{.Env.GOPATH}}

    # Custom gcflags templates.
    # 默认是 空.
    gcflags:
      - all=-trimpath={{.Env.GOPATH}}
      - ./dontoptimizeme=-N

    # Custom ldflags templates.
    # 默认是 `-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}`.
    ldflags:
      - -s -w -X main.build={{.Version}}
      - ./usemsan=-msan

    # 运行构建期间的环境变量.
    # 默认是 空.


    # GOARM 要构建的 ， 若GOARCH 是 arm时.
    # 更多内容，请参考: https://golang.org/doc/install/source#environment
    # 默认是 只有 6.
#    goarm:
#      - 6
#      - 7

    #  GOOS + GOARCH + GOARM 组合忽略列表.
    # 默认是 空.
    ignore:
      - goos: darwin
        goarch: 386
      - goos: linux
        goarch: arm
        goarm: 7

    # Hooks 可用于 自定义最终二进制文件,
    # 例如, 运行 generators.
    # 默认 都为 空.
